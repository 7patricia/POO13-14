#BlueJ class context
comment0.params=
comment0.target=FitnessUM()
comment1.params=r\ e\ u
comment1.target=FitnessUM(java.util.ArrayList,\ java.util.TreeMap,\ Utilizador)
comment10.params=mail\ pass
comment10.target=boolean\ remover(java.lang.String,\ java.lang.String)
comment10.text=\n\ Fun\u00E7\u00E3o\ que\ verifica\ se\ um\ utilizador\ est\u00E1\ registado\ e\ se\ sim\ remove-o\ da\ lista\n\ de\ registos\n
comment11.params=mail\ pass
comment11.target=int\ userIndice(java.lang.String,\ java.lang.String)
comment11.text=\n\ Fun\u00E7\u00E3o\ que\ retorna\ a\ posi\u00E7\u00E3o\ de\ um\ utilizador\ no\ ArrayList\ de\ registos\n\ (se\ ele\ tiver\ registado,\ se\ n\u00E3o\ retorna\ menos\ um)\n
comment12.params=a
comment12.target=void\ adicionaActividade(Actividade)
comment12.text=\n\ Fun\u00E7\u00E3o\ que\ adiciona\ uma\ actividade\ \u00E0\ lista\ de\ atividades\ do\ utilizador\ ligado\n
comment13.params=a
comment13.target=boolean\ removeActividade(Actividade)
comment13.text=\n\ Fun\u00E7\u00E3o\ que\ remove\ uma\ actividade\ da\ lista\ de\ actividades\ do\ utilizador\ ligado\n
comment14.params=
comment14.target=java.util.ArrayList\ dezUtilizador()
comment14.text=\n\ Fun\u00E7\u00E3o\ que\ retorna\ as\ 10\ actividades\ mais\ recentes\ do\ utilizador\ ligado\n
comment15.params=amigo
comment15.target=java.util.ArrayList\ dezAmigo(Utilizador)
comment15.text=\n\ Fun\u00E7\u00E3o\ que\ retorna\ as\ 10\ actividades\ mais\ recentes\ de\ um\ amigo\ do\ utilizador\ ligado\n
comment16.params=
comment16.target=java.lang.String\ dados_util()
comment16.text=\n\ Fun\u00E7\u00E3o\ que\ mostra\ os\ dados\ do\ utilizador\ ligado\n
comment17.params=amigo
comment17.target=java.lang.String\ dados_amigo(Utilizador)
comment17.text=\ \n\ Fun\u00E7\u00E3o\ que\ mostra\ dados\ de\ um\ amigo\n
comment18.params=pedinte
comment18.target=void\ aceitarPedido(Utilizador)
comment18.text=\n\ Fun\u00E7\u00E3o\ que\ permite\ ao\ utilizador\ ligado\ aceitar\ um\ pedido\ de\ amizade\n
comment19.params=pedinte
comment19.target=void\ rejeitarPedido(Utilizador)
comment19.text=\n\ Fun\u00E7\u00E3o\ que\ permite\ ao\ utilizador\ ligado\ rejeitar\ um\ pedido\ de\ amizade\n
comment2.params=u
comment2.target=void\ setUtilizadorLigado(Utilizador)
comment20.params=futuroAmigo
comment20.target=void\ efectuarPedido(Utilizador)
comment20.text=\n\ Fun\u00E7\u00E3o\ que\ permite\ ao\ utilizador\ ligado\ fazer\ um\ pedido\ de\ amizade\n
comment21.params=mes
comment21.target=java.util.TreeMap\ mes(java.lang.String)
comment21.text=\n\ Fun\u00E7\u00E3o\ que\ retorna\ as\ actividades\ do\ utilizador\ ligado\ num\ determinado\ m\u00EAs\n
comment22.params=ano
comment22.target=java.util.TreeMap\ ano(java.lang.String)
comment22.text=\n\ Fun\u00E7\u00E3o\ que\ retorna\ as\ actividades\ do\ utilizador\ ligado\ num\ determinado\ ano\n
comment23.params=o
comment23.target=boolean\ equals(java.lang.Object)
comment24.params=
comment24.target=FitnessUM\ clone()
comment3.params=e
comment3.target=void\ setEventos(java.util.TreeMap)
comment4.params=r
comment4.target=void\ setRegistos(java.util.ArrayList)
comment5.params=
comment5.target=Utilizador\ getUtilizadorLigado()
comment6.params=
comment6.target=java.util.ArrayList\ getRegistos()
comment7.params=
comment7.target=java.util.TreeMap\ getEventos()
comment8.params=mail\ pass
comment8.target=boolean\ checkUser(java.lang.String,\ java.lang.String)
comment8.text=\n\ Fun\u00E7\u00E3o\ que\ verifica\ se\ um\ dado\ e-mail\ e\ password\ correspondem\ a\ um\ utilizador\ \n\ registado\ e\ se\ sim\ faz\ o\ login\n
comment9.params=mail\ pass
comment9.target=boolean\ registar(java.lang.String,\ java.lang.String)
comment9.text=\n\ Fun\u00E7\u00E3o\ que\ verifica\ se\ um\ utilizador\ j\u00E1\ est\u00E1\ registado\ e\ se\ n\u00E3o\ estiver\ \n\ adiciona-o\ \u00E0\ lista\ de\ registos\n
numComments=25
